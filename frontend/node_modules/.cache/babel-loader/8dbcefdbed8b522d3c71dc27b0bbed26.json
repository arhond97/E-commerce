{"ast":null,"code":"import hyphenate from 'hyphenate-style-name';\nimport mq from './mediaQuery';\n\nconst negate = cond => `not ${cond}`;\n\nconst keyVal = (k, v) => {\n  const realKey = hyphenate(k); // px shorthand\n\n  if (typeof v === 'number') {\n    v = `${v}px`;\n  }\n\n  if (v === true) {\n    return realKey;\n  }\n\n  if (v === false) {\n    return negate(realKey);\n  }\n\n  return `(${realKey}: ${v})`;\n};\n\nconst join = conds => conds.join(' and ');\n\nconst toQuery = obj => {\n  const rules = [];\n  Object.keys(mq.all).forEach(k => {\n    const v = obj[k];\n\n    if (v != null) {\n      rules.push(keyVal(k, v));\n    }\n  });\n  return join(rules);\n};\n\nexport default toQuery;","map":{"version":3,"sources":["C:/Users/Arhond/IdeaProjects/E-commerce/node_modules/react-responsive/src/toQuery.js"],"names":["hyphenate","mq","negate","cond","keyVal","k","v","realKey","join","conds","toQuery","obj","rules","Object","keys","all","forEach","push"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,sBAAtB;AACA,OAAOC,EAAP,MAAe,cAAf;;AAEA,MAAMC,MAAM,GAAIC,IAAD,IAAW,OAAMA,IAAK,EAArC;;AAEA,MAAMC,MAAM,GAAG,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACvB,QAAMC,OAAO,GAAGP,SAAS,CAACK,CAAD,CAAzB,CADuB,CAGvB;;AACA,MAAI,OAAOC,CAAP,KAAa,QAAjB,EAA2B;AACzBA,IAAAA,CAAC,GAAI,GAAEA,CAAE,IAAT;AACD;;AACD,MAAIA,CAAC,KAAK,IAAV,EAAgB;AACd,WAAOC,OAAP;AACD;;AACD,MAAID,CAAC,KAAK,KAAV,EAAiB;AACf,WAAOJ,MAAM,CAACK,OAAD,CAAb;AACD;;AACD,SAAQ,IAAGA,OAAQ,KAAID,CAAE,GAAzB;AACD,CAdD;;AAgBA,MAAME,IAAI,GAAIC,KAAD,IAAWA,KAAK,CAACD,IAAN,CAAW,OAAX,CAAxB;;AAEA,MAAME,OAAO,GAAIC,GAAD,IAAS;AACvB,QAAMC,KAAK,GAAG,EAAd;AACAC,EAAAA,MAAM,CAACC,IAAP,CAAYb,EAAE,CAACc,GAAf,EAAoBC,OAApB,CAA6BX,CAAD,IAAO;AACjC,UAAMC,CAAC,GAAGK,GAAG,CAACN,CAAD,CAAb;;AACA,QAAIC,CAAC,IAAI,IAAT,EAAe;AACbM,MAAAA,KAAK,CAACK,IAAN,CAAWb,MAAM,CAACC,CAAD,EAAIC,CAAJ,CAAjB;AACD;AACF,GALD;AAMA,SAAOE,IAAI,CAACI,KAAD,CAAX;AACD,CATD;;AAWA,eAAeF,OAAf","sourcesContent":["import hyphenate from 'hyphenate-style-name'\nimport mq from './mediaQuery'\n\nconst negate = (cond) => `not ${cond}`\n\nconst keyVal = (k, v) => {\n  const realKey = hyphenate(k)\n\n  // px shorthand\n  if (typeof v === 'number') {\n    v = `${v}px`\n  }\n  if (v === true) {\n    return realKey\n  }\n  if (v === false) {\n    return negate(realKey)\n  }\n  return `(${realKey}: ${v})`\n}\n\nconst join = (conds) => conds.join(' and ')\n\nconst toQuery = (obj) => {\n  const rules = []\n  Object.keys(mq.all).forEach((k) => {\n    const v = obj[k]\n    if (v != null) {\n      rules.push(keyVal(k, v))\n    }\n  })\n  return join(rules)\n}\n\nexport default toQuery\n"]},"metadata":{},"sourceType":"module"}