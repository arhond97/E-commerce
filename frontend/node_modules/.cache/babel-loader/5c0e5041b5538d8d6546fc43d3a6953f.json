{"ast":null,"code":"import React from 'react';\nimport matchMedia from 'matchmediaquery';\nimport hyphenate from 'hyphenate-style-name';\nimport areObjectsEqual from 'shallow-equal/objects';\nimport toQuery from './toQuery';\nimport Context from './Context';\n\nconst makeQuery = settings => settings.query || toQuery(settings);\n\nconst hyphenateKeys = obj => {\n  if (!obj) return null;\n  const keys = Object.keys(obj);\n  if (keys.length === 0) return null;\n  return keys.reduce((result, key) => {\n    result[hyphenate(key)] = obj[key];\n    return result;\n  }, {});\n};\n\nconst useIsUpdate = () => {\n  const ref = React.useRef(false);\n  React.useEffect(() => {\n    ref.current = true;\n  }, []);\n  return ref.current;\n};\n\nconst useDevice = deviceFromProps => {\n  const deviceFromContext = React.useContext(Context);\n\n  const getDevice = () => hyphenateKeys(deviceFromProps) || hyphenateKeys(deviceFromContext);\n\n  const [device, setDevice] = React.useState(getDevice);\n  React.useEffect(() => {\n    const newDevice = getDevice();\n\n    if (!areObjectsEqual(device, newDevice)) {\n      setDevice(newDevice);\n    }\n  }, [deviceFromProps, deviceFromContext]);\n  return device;\n};\n\nconst useQuery = settings => {\n  const getQuery = () => makeQuery(settings);\n\n  const [query, setQuery] = React.useState(getQuery);\n  React.useEffect(() => {\n    const newQuery = getQuery();\n\n    if (query !== newQuery) {\n      setQuery(newQuery);\n    }\n  }, [settings]);\n  return query;\n};\n\nconst useMatchMedia = (query, device) => {\n  const getMatchMedia = () => matchMedia(query, device || {}, !!device);\n\n  const [mq, setMq] = React.useState(getMatchMedia);\n  const isUpdate = useIsUpdate();\n  React.useEffect(() => {\n    if (isUpdate) {\n      // skip on mounting, it has already been set\n      setMq(getMatchMedia());\n    }\n\n    return () => {\n      mq.dispose();\n    };\n  }, [query, device]);\n  return mq;\n};\n\nconst useMatches = mediaQuery => {\n  const [matches, setMatches] = React.useState(mediaQuery.matches);\n  React.useEffect(() => {\n    const updateMatches = () => {\n      setMatches(mediaQuery.matches);\n    };\n\n    mediaQuery.addListener(updateMatches);\n    updateMatches();\n    return () => {\n      mediaQuery.removeListener(updateMatches);\n    };\n  }, [mediaQuery]);\n  return matches;\n};\n\nconst useMediaQuery = (settings, device, onChange) => {\n  const deviceSettings = useDevice(device);\n  const query = useQuery(settings);\n  if (!query) throw new Error('Invalid or missing MediaQuery!');\n  const mq = useMatchMedia(query, deviceSettings);\n  const matches = useMatches(mq);\n  const isUpdate = useIsUpdate();\n  React.useEffect(() => {\n    if (isUpdate && onChange) {\n      onChange(matches);\n    }\n  }, [matches]);\n  return matches;\n};\n\nexport default useMediaQuery;","map":{"version":3,"sources":["C:/Users/Arhond/IdeaProjects/Serwis_E-commerce_Projekt/node_modules/react-responsive/src/useMediaQuery.js"],"names":["React","matchMedia","hyphenate","areObjectsEqual","toQuery","Context","makeQuery","settings","query","hyphenateKeys","obj","keys","Object","length","reduce","result","key","useIsUpdate","ref","useRef","useEffect","current","useDevice","deviceFromProps","deviceFromContext","useContext","getDevice","device","setDevice","useState","newDevice","useQuery","getQuery","setQuery","newQuery","useMatchMedia","getMatchMedia","mq","setMq","isUpdate","dispose","useMatches","mediaQuery","matches","setMatches","updateMatches","addListener","removeListener","useMediaQuery","onChange","deviceSettings","Error"],"mappings":"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","sourcesContent":["import React from 'react'\nimport matchMedia from 'matchmediaquery'\nimport hyphenate from 'hyphenate-style-name'\nimport areObjectsEqual from 'shallow-equal/objects'\nimport toQuery from './toQuery'\nimport Context from './Context'\n\nconst makeQuery = (settings) => settings.query || toQuery(settings)\n\nconst hyphenateKeys = (obj) => {\n  if (!obj) return null\n  const keys = Object.keys(obj)\n  if (keys.length === 0) return null\n  return keys.reduce((result, key) => {\n    result[hyphenate(key)] = obj[key]\n    return result\n  }, {})\n}\n\nconst useIsUpdate = () => {\n  const ref = React.useRef(false)\n\n  React.useEffect(() => {\n    ref.current = true\n  }, [])\n\n  return ref.current\n}\n\nconst useDevice = (deviceFromProps) => {\n  const deviceFromContext = React.useContext(Context)\n  const getDevice = () =>\n    hyphenateKeys(deviceFromProps) || hyphenateKeys(deviceFromContext)\n  const [ device, setDevice ] = React.useState(getDevice)\n\n  React.useEffect(() => {\n    const newDevice = getDevice()\n    if (!areObjectsEqual(device, newDevice)) {\n      setDevice(newDevice)\n    }\n  }, [ deviceFromProps, deviceFromContext ])\n\n  return device\n}\n\nconst useQuery = (settings) => {\n  const getQuery = () => makeQuery(settings)\n  const [ query, setQuery ] = React.useState(getQuery)\n\n  React.useEffect(() => {\n    const newQuery = getQuery()\n    if (query !== newQuery) {\n      setQuery(newQuery)\n    }\n  }, [ settings ])\n\n  return query\n}\n\nconst useMatchMedia = (query, device) => {\n  const getMatchMedia = () => matchMedia(query, device || {}, !!device)\n  const [ mq, setMq ] = React.useState(getMatchMedia)\n  const isUpdate = useIsUpdate()\n\n  React.useEffect(() => {\n    if (isUpdate) {\n      // skip on mounting, it has already been set\n      setMq(getMatchMedia())\n    }\n\n    return () => {\n      mq.dispose()\n    }\n  }, [ query, device ])\n\n  return mq\n}\n\nconst useMatches = (mediaQuery) => {\n  const [ matches, setMatches ] = React.useState(mediaQuery.matches)\n\n  React.useEffect(() => {\n    const updateMatches = () => {\n      setMatches(mediaQuery.matches)\n    }\n    mediaQuery.addListener(updateMatches)\n    updateMatches()\n\n    return () => {\n      mediaQuery.removeListener(updateMatches)\n    }\n  }, [ mediaQuery ])\n\n  return matches\n}\n\nconst useMediaQuery = (settings, device, onChange) => {\n  const deviceSettings = useDevice(device)\n  const query = useQuery(settings)\n  if (!query) throw new Error('Invalid or missing MediaQuery!')\n  const mq = useMatchMedia(query, deviceSettings)\n  const matches = useMatches(mq)\n  const isUpdate = useIsUpdate()\n\n  React.useEffect(() => {\n    if (isUpdate && onChange) {\n      onChange(matches)\n    }\n  }, [ matches ])\n\n  return matches\n}\n\nexport default useMediaQuery\n"]},"metadata":{},"sourceType":"module"}